Static and Dynamic Routes
    If you want to make any route then make files or foldes in pages 
    folder and name should start from small letter other wise it will 
    not work and give us error page not found and for dynamic route we 
    make file using square brackets [postId].js i.e: 1,2,3 etc and simililarly for folder
    [categoryName] i.e: electronics, clothes etc.

These all below toics are in old-pages folder
folder structure for static, dynamic and nested routes.
    static route
        home.js ------------------ file access: rootUrl/home
    nested static routes
        blog --------------------- folder 
            add.js --------------- file access: rootUrl/blog/add
            edit.js -------------- file access: rootUrl/blog/edit
            index.js ------------- root file when call blog then this file is call  access: rootUrl/blog
    dynamic routes
        article --------------------- folder 
            policy.js --------------- file access: rootUrl/article/policy (static route)
            [articleId].js -------------- file access: rootUrl/article/articleId here articleId would be dynamic and can be any number. (dynamic route)
            index.js ------------- root file when call article then this file is call  access: rootUrl/article (static route)

        rootUrl/brand/honda/model/2010
        brand --------------------- folder 
            [brandName] --------------- dynamic folder 
            model --------------------- staic folder 
            [model].js -------------- file access: rootUrl/brand/brandId here brandId would be dynamic and can be any number. (dynamic route)
            index.js ------------- root file when call brand then this file is call  access: rootUrl/brand (static route)
       
        rootUrl/info/car
        rootUrl/info/car/honda
        rootUrl/info/car/honda/2010
        for these above 3 routes we can make route like this [...name].js here name would be anything in our case infoType i.e: (/info/car, /info/car/honda, /info/car/honda/2010) 
        info --------------------- folder 
            [infoName] --------------- dynamic folder 
            model --------------------- staic folder 
            [model].js -------------- file access: rootUrl/info/infoId here infoId would be dynamic and can be any number. (dynamic route)
            index.js ------------- root file when call info then this file is call  access: rootUrl/info (static route)


These 3 toics are in pages folder
1. link replace.
2. route push.
3. shallow routing.
    shallow routing allows you to change the URL without running data fetching methods again, that includes
    getServerSideProps, getStaticProps, and getInitailProps.
    state remain same (home?page=1, home?page=2, home?page=3) means home content will not be change.
4. Custom 404 page.

getServerSideProps
getStaticProps
getInitailProps


styling
    /* we can not use pure selectors or builtin elements of html (div, a, h1, span etc) if you want then go to their css in global.css file  */
    /* this will cause an error  */
    /* div {
    background-color: aqua;
    } */


Pre rendering
    1. Static generation (preference)
    2. Server-side rendering

Static generation
    getStaticProps
    getStaticPath
    1. with data (fetching data from server or calling api and get data from it and the all data set inot a single file and then send to client from server)

    2. without data (like in our case our about, home and news pages that having no kind of api calling and dynamic data fetching)

Server-side rendering
    getServerSideProps (jesa ka ecommerce website ka product details pages because user har baar differen et products pa click karta hai us product ki description page pa jane ka lia unpredictable hota hai is case ma api hit hoti hai har bari ma)


same api ko kuch time ka baad hit karna pa har bar different data mile


λ  (Server)  server-side renders at runtime (uses getInitialProps or getServerSideProps)
○  (Static)  automatically rendered as static HTML (uses no initial props)
●  (SSG)     automatically generated as static HTML + JSON (uses getStaticProps)
   (ISR)     incremental static regeneration (uses revalidate in getStaticProps)
